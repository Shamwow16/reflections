What happens when you initialize a repository? Why do you need to do it?
ANSWER: When a repository is initialized, certain metadata is added to the directory in a hidden .git file which indicates that this is a new repository. A message also appears in the Git Bash console that indicates that an empty repository has been created. Initializing a repository is crucial because without it, a directory is just a directory and you cannot use Git version control.

How is the staging area different from the working directory and the repository? What value do you think it offers?
ANSWER: The staging area is different because it is the intermediate space for files to be kept before being committed from the directory to the repository. It is valuable because it gives us a "final review" of what is ready to be committed. If we, by mistake, add a file to the staging area for commitment, we can remove it from the staging area.

How can you use the staging area to make sure you have one commit per logical change?
ANSWER: The staging area shows the files that have been modified. Once you have made one logical change, it will show you that the file has been modified. We can then make the commit. Once the commit is made, we can move on to additional logical changes that need to be made.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
ANSWER: Branches would be super helpful anytime I would want to test out a different feature to implement in the code. Instead of having to worry about using the master branch for all my creativity, it is better to "branch off" from the master (so that it remains intact) and work on the new branch. If I do find that my new feature is worth adding to the project, I can easily merge the two branches. As an example, if I ever develop a game (there is an arcade game project coming up!), I can always branch out from the master to make different difficulty levels for my game. 

How do the diagrams help you visualize the branch structure?
ANSWER: The diagrams are very helpful in the sense that they show the overall structure and direction that the project is taking. While coding, one can easily get lost in the finer details but it is necessary to zoom out once in a while and look at the bigger picture. This is where te branch structure can help. I have never worked in a web development team before but I am sure it does wonders for project managers to see the project as a whole. From a developer's standpoint, it also helps to identify how many branches there are and any commits that are "branchless". It would also help developer teams decide on how and where to merge existing branches.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
ANSWER: The result is that the first branch's commits merge with those of the second commit and a "combined" merge commit is made. A git log command will show that the commits from both branches are arranged chronologically. We represent it this way to show that the secondary branch merges into the master branch and the "merged commit" becomes the tip of the master branch. 
