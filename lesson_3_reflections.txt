When would you want to use a remote repository rather than keeping all your work local?
ANSWER: A remote repository is super useful for sharing one's work with the rest of the world. Many commonly used tools/framewors such as Bootstrap, Atom and JQuery are found in repositories on GitHub. It is all part of the open-sharing environment and people can make contributions to repositories (provided the manager of the repository accepts your change). The remote repository can also serve as the place where you can "release" all the code that you would like shared with other users. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
ANSWER: This is very important especially when it comes to managing large repositories for frameworks like Bootstrap, which can have 1000s of commits on GitHub. Since it is open source, there are a lot of contributors who can make edits and the managers of the repo might not necessarily want to accept all those changes. If all those contributions get updated automatically in the local repo of a Bootstrap admin, it could become super chaotic. Pulling changes manually also allows you to fetch the commits/changes that you wish to see in your local repo.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
ANSWER: A fork is the process of cloning the repository from the owner and creating the clone on Github's server. Forking is useful when we want to link back to another user's repo without having to worry about changing files in the owner's repo. This is in contrast to a regular clone, where the repo is cloned from the owner on Github to one's local computer in the form of a local repository. This is always important when we need to add/remove code from the repository. A branch is a series of commits that is part of a larger structure. Typically, we use a branch when we want to experiment a new feature and do not want to modify the master branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
ANSWER: The main benefit of having a copy of the last known remote state stored locally is that if one is going to be without internet connectivity for a period of time, such as on a flight, one can access the last known remote state without having to access the remote repo.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
ANSWER: I would need to have my collaborators sit right next to me on their computers at the very least, and even this wont be efficient. I could also share my screen with other programmers and assume the role of "master programmer", which would be super chaotic because my coworkers would have to read through every line of code as I code. This whole process sounds inefficient, error prone and stressful so I would say version control is the only way to go. If we were working on a very small piece of code, perhaps Git is not necessary. However, most meaningul code has a certain level of complexity and being able to work on different parts of the code and to create pull requests seems to be the most efficient way of handling coding projects.
